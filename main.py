# -*- coding: utf-8 -*-
"""
Created on Sun Sep  6 00:05:08 2020

@author: Danish
"""

import sys
from DataPrepration import Get_Data, data_joiner
from SvmClassifier import SVMClassifier, load_model
from GAN import train_gan
from svm_train_test import prepare_trainSVM, prepare_evaluateSVM
from gans_train_test import prepare_evaluateGAN, prepare_trainGAN



def get_user_choice(menu='main'):
    print('\n\n___________________________________________________________________________')
    if menu=='main':
        print('\t\t1. Train New Models.')
        print('\t\t2. Test & Evaluate Using Existing Models & New Data.')
        print('\t\t3. Exit')
        print('___________________________________________________________________________')
        ch = int(input('Enter your choice between 1 to 3: '))

    elif menu=='1':
        print('\t\t1. Prepare Data for SVM Model')
        print('\t\t2. Prepare Data for GANs Model')
        print('\t\t3. Train, Save & Evaluate SVM Model')
        print('\t\t4. Train, Save & Evaluate GAN Model')
        print('\t\t5. Test SVM Model & State Results')
        print('\t\t6. Test GAN Model: GAN Discriminator or Generate Features')
        print('\t\t7. Exit')
        print('___________________________________________________________________________')
        ch = int(input('Enter your choice between 1 to 7: '))
    
    elif menu=='2':
        print('\t\t1. Test SVM Model & State Results')
        print('\t\t2. Test GAN Model: GAN Discriminator or Generate Features')
        print('\t\t3. Exit')
        print('___________________________________________________________________________')
        ch = int(input('Enter your choice between 1 to 3: '))
    print('___________________________________________________________________________')
    return ch





def menu2_handler(pathX, pathY, f_name):
    sample_features, gen_features = None, None
    ch = get_user_choice(menu='2')
    if ch == 1:
        save_path='./Data/SVM/'
        f_name = 'SVM_'+f_name.split('.')[0]+'.obj'
        #prepare data
        prepare_trainSVM(pathX, pathY, save_path, f_name, train=False)
        #evaluate model
        _ = prepare_evaluateSVM(save_path, f_name)
        
    #Test SVM Model & State Results
    elif ch==2:
        save_path = './Data/GANs/'
        f_name = 'GANs_'+f_name.split('.')[0]+'.obj'
        #prepare data
        _ = prepare_trainGAN(pathX, pathY, save_path, f_name, train=False)
        #evaluate model
        print('1. Classify i.e. Evaluate Discriminator.')
        print('2. Generate Features.')
        choice = int(input('Choose the type of Evaluation by entering 1 or 2: '))
        #Evaluation
        if choice==1:
            sample_features, gen_features = prepare_evaluateGAN('classify', save_path, f_name,
                                                                X_malware=None)
        elif choice==2:
            sample_features, gen_features = prepare_evaluateGAN('features', save_path, f_name,
                                                                X_malware=None)
    #Exit  
    elif ch==3:
        sys.exit(0)
    else:
        print('\nInvalid Choice, Starting Process Again\n')
        menu1_handler()
    return sample_features, gen_features


def menu1_handler():
    sample_features, gen_features = None, None
    #paths of the dataset
    pathX = './Data/drebin-features/drebin-parrot-v2-down-features-X.json'
    pathY = './Data/drebin-features/drebin-parrot-v2-down-features-Y.json'
    ch = get_user_choice(menu='1')
    #Prepare Data for SVM Model
    if ch==1:
        save_path='./Data/SVM/'
        f_name='SVM_Data.obj'
        prepare_trainSVM(pathX, pathY, save_path, f_name, train=False)
        
    #Prepare Data for GANs Model
    elif ch==2:
        save_path = './Data/GANs/'
        f_name='GANs_Data.obj'
        _ = prepare_trainGAN(pathX, pathY, save_path, f_name, train=False)
        
    #Train, Save & Evaluate SVM Model
    elif ch==3:
        save_path='./Data/SVM/'
        f_name='SVM_Data.obj'
        prepare_trainSVM(pathX, pathY, save_path, f_name, prepare=False)
        ch = input('Do You want to evaluate the SVM Model (y/N): ').lower()
        if ch=='y':
            #Evaluate SVM
            _ = prepare_evaluateSVM(save_path, f_name)
            
    #Train, Save & Evaluate GAN Model
    elif ch==4:
        save_path = './Data/GANs/'
        f_name='GANs_Data.obj'
        _ = prepare_trainGAN(pathX, pathY, save_path, f_name, prepare=False)
        ch = input('Do You want to evaluate the GANs Model (y/N): ').lower()
        if ch=='y':
            print('1. Classify i.e. Evaluate Discriminator.')
            print('2. Generate Features.')
            choice = int(input('Choose the type of Evaluation by entering 1 or 2: '))
            #Evaluation
            if choice==1:
                sample_features, gen_features = prepare_evaluateGAN('classify', save_path, f_name,
                                                                    X_malware=None)
            elif choice==2:
                sample_features, gen_features = prepare_evaluateGAN('features', save_path, f_name,
                                                                    X_malware=None)
            else:
                print('Invalid Choice!!!')
    
    #Test SVM Model & State Results
    elif ch==5:
        save_path='./Data/SVM/'
        f_name='SVM_Data.obj'
        #Evaluate SVM
        _ = prepare_evaluateSVM(save_path, f_name)
    
    #Test GAN Model: GAN Discriminator or Generate Features
    elif ch==6:
        save_path = './Data/GANs/'
        f_name='GANs_Data.obj'
        print('1. Classify i.e. Evaluate Discriminator.')
        print('2. Generate Features.')
        choice = int(input('Choose the type of Evaluation by entering 1 or 2: '))
        #Evaluation
        if choice==1:
            sample_features, gen_features = prepare_evaluateGAN('classify', save_path, f_name,
                                                                X_malware=None)
        elif choice==2:
            sample_features, gen_features = prepare_evaluateGAN('features', save_path, f_name,
                                                                X_malware=None)
    #Exit
    elif ch==7:
        sys.exit(0)
    else:
        print('\nInvalid Choice, Starting Process Again\n')
        menu1_handler()
    return sample_features, gen_features


def main_ch3():
    path = './Data/drebin-features/'
    print('Place your X & Y Json file in this directory: <{0}>'.format(path))
    ch = input('Are you ready to proceed (y/N): ').lower()
    if ch=='y':
        X_name = input('\nEnter the complete name of Json file conatining Features: ')
        Y_name = input('Enter the complete name of Json file conatining Labels: ')
        if '.json' not in X_name:
            X_name += '.json'
        if '.json' not in Y_name:
            Y_name += '.json'
        pathX = path+X_name
        pathY = path+Y_name
        print('\t\t\t\t\t\t___________________________________')
        return pathX, pathY, X_name
    elif ch=='n':
        SystemExit
    else:
        print('Wrong Choice!!!')

def main():
    sample_features, gen_features = None, None
    #getting the choice
    ch = get_user_choice(menu='main')
    if ch==1:
        sample_features, gen_features = menu1_handler()
    elif ch==2:
        pathX, pathY, f_name = main_ch3()
        sample_features, gen_features = menu2_handler(pathX, pathY, f_name)
    elif ch==3:
        sys.exit(0)
    else:
        print('\nInvalid Choice, Starting Process Again\n')
        main()
    return sample_features, gen_features
    
        

if __name__=='__main__':
    sample_features, gen_features = main()