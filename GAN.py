# -*- coding: utf-8 -*-
"""
Created on Tue Sep  1 17:28:57 2020

@author: Danish
"""

import tensorflow as tf
from tensorflow.keras.layers import Dense, LeakyReLU, Dropout, BatchNormalization, Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

def create_generator(input_shape, name):
    with tf.name_scope(name):
        gen_input = Input(input_shape)
        
        d1 = Dense(256)(gen_input)
        lr1 = LeakyReLU(0.2)(d1)
        
        d2 = Dense(512)(lr1)
        lr2 = LeakyReLU(0.2)(d2)
        
        d3 = Dense(1024)(lr2)
        lr3 = LeakyReLU(0.2)(d3)
        
        generator = Model(inputs=gen_input, outputs=lr3, name=name)
    
    return generator

def create_discriminator(input_shape, name):
    with tf.name_scope(name):
        disc_input = Input(input_shape)
        
        d1 = Dense(1024)(disc_input)
        lr1 = LeakyReLU(0.2)(d1)
        
        d2 = Dense(512)(lr1)
        lr2 = LeakyReLU(0.2)(d2)
        
        d3 = Dense(256)(lr2)
        lr3 = LeakyReLU(0.2)(d3)
        
        fc = Dense(1, activation='sigmoid')(lr3)
        
        discriminator = Model(inputs=disc_input, outputs=fc, name=name)
        discriminator.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001))
    return discriminator

def create_gan(input_shape, name):
    generator = create_generator(input_shape, name='Geneartor')
    discriminator = create_discriminator(input_shape, name='Discriminator')
    #Make the discriminator untrainable when we are training the generator.  
    #This doesn't effect the discriminator by itself
    discriminator.trainable = False
    #Combine the two models to create the GAN
    gan_input = Input(shape=input_shape)
    fake_data = generator(gan_input)
    gan_output = discriminator(fake_data)
    
    gan = Model(gan_input, gan_output, name=name)
    #No model compilation because training is done using GradientTape
    gan.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001))
    return generator, discriminator, gan