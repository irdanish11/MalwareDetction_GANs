# -*- coding: utf-8 -*-
"""
Created on Tue Sep  1 16:46:18 2020

@author: Danish
"""

from DataPrepration import prepare_GanData, load_GanData
from GAN import train_gan, evaluate_discriminator, generate_features
import json


def prepare_trainGAN(pathX, pathY, save_path='./Data/GANs/', f_name='GANs_Data.obj', prepare=True, train=True, n_features=10000):
    if prepare:
        _ = prepare_GanData(pathX, pathY, save_path, f_name, 
                        feature_selection=True, n_features=n_features, test_size=0.25)
    
    if train: 
        X_train, X_test, feature_names = load_GanData(save_path, f_name)
        epochs = int(input('\nEnter the number of Epochs for GANs Training: '))
        batch_size = int(input('Enter the Batch Size for GANs Training: '))
        print('\n')
        history = train_gan(X_train, save_path, epochs, batch_size)
        return history


def prepare_evaluateGAN(mode='classify', save_path='./Data/GANs/', f_name='GANs_Data.obj', X_malware=None):
    X_train, X_test, feature_names = load_GanData(save_path, f_name)
    gans_path = save_path+'checkpoints'
    if mode=='classify':
        labels= {0:'Benignware', 1:'Malware'}
        path_cm = save_path+'Discriminator_ConfusionMatrix.png'
        title = 'Discriminator - Confusion Matrix'
        acc = evaluate_discriminator(X_test, labels, gans_path, path_cm, title, normalize='true')
        return acc, None
    elif mode=='features':
        if X_malware == None:
            #Getting Generated Features
            X_malware = X_test[1]
        sample_features, gen_features = generate_features(X_malware, feature_names, gans_path, save_path)
        return sample_features, gen_features

if __name__=='__main__':
    pathX = './Data/drebin-features/drebin-parrot-v2-down-features-X.json'
    pathY = './Data/drebin-features/drebin-parrot-v2-down-features-Y.json'

    save_path = './Data/GANs/'
    f_name='GANs_Data.obj'
    #train
    history = prepare_trainGAN(pathX, pathY, save_path, f_name)
    ch = input('Do You want to evaluate the SVM Model (y/N): ').lower()
    if ch=='y':
        print('1. Classify i.e. Evaluate Discriminator.')
        print('2. Generate Features.')
        choice = choice = int(input('Choose the type of Evaluation by entering 1 or 2: '))
        #Evaluation
        if choice==1:
            sample_features, gen_features = prepare_evaluateGAN('classify', save_path, f_name,
                                                                X_malware=None)
        elif choice==2:
            sample_features, gen_features = prepare_evaluateGAN('features', save_path, f_name,
                                                                X_malware=None)
        else:
            print('Invalid Choice!!!')