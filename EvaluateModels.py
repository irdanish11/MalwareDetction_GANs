# -*- coding: utf-8 -*-
"""
Created on Sun Sep  6 00:05:08 2020

@author: Danish
"""

import sys
from DataPrepration import Get_Data, data_joiner
from SvmClassifier import SVMClassifier, load_model
from scipy.sparse import vstack
import numpy as np

def get_user_choice():
    print('\n\n___________________________________________________________________________')
    print('\t\t1. Train SVM Classifier')
    print('\t\t2. Evaluate SVM Classifier')
    print('\t\t3. Train GAN Model')
    print('\t\t4. Evaluate GAN Model')
    print('\t\t5. Exit')
    print('___________________________________________________________________________')
    ch = int(input('Enter your choice between 1 to 5: '))
    print('___________________________________________________________________________')
    return ch

def main():
    #paths of the dataset
    pathX = 'drebin-features/drebin-parrot-v2-down-features-X.json'
    pathY = 'drebin-features/drebin-parrot-v2-down-features-Y.json'
    svm_path='./SVM/checkpoints/'
    svm_name='SVM.obj'
    #getting the choice
    ch = get_user_choice()
    if ch==1:
        print('\n\n___________________________________________________________________________\n')
        print('\t\t\t\t\tTraining SVM Classifier')
        #Loading & Preparing Data
        malware = Get_Data(pathX, pathY, choice=4, verbose=False)
        benignware = Get_Data(pathX, pathY, choice=5, verbose=False)
        X_train, Y_train = data_joiner(benignware, malware, data='train')
        #Training SVM Model
        svm = SVMClassifier(C=1.0, path=svm_path, name=svm_name, svc_linear=True, weight=None)
        _ = svm.fit_svm_classifier(X_train, Y_train)   
        print('\n___________________________________________________________________________\n')

    elif ch==2:
        print('\n\n___________________________________________________________________________\n')
        print('\t\t\t\t\tEvaluating SVM Classifier')
        labels= {0:'Benignware', 1:'Malware'}
        #Loading & Preparing Data
        malware = Get_Data(pathX, pathY, choice=4, verbose=False)
        benignware = Get_Data(pathX, pathY, choice=5, verbose=False)
        X_test, Y_test = data_joiner(benignware, malware, data='test')
        #Evaluate SVM Model
        svm = load_model(svm_path+svm_name)
        path = svm_path.split('/')[1]+'/SVM_ConfusionMatrix.png'
        title = 'SVM - Confusion Matrix'
        _ = svm.visualize_evaluation(X_test, Y_test, labels, title, path=path, normalize='all')  
        print('\n___________________________________________________________________________')
        
    elif ch==3:
        pass
    elif ch==4:
        pass
    elif ch==5:
        sys.exit()
    else:
        print('\nInvalid Choice!!!\n\n')
        main()
        

if __name__=='__main__':
    main()