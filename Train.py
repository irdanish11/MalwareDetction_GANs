# -*- coding: utf-8 -*-
"""
Created on Tue Sep  1 16:46:18 2020

@author: Danish
"""


from data import Data
import numpy as np
import tensorflow as tf

d =  Data()

X = d.get_X()
Y = d.get_Y()
X_malware = d.get_X_malware()
X_goodware = d.get_X_goodware()
feature_names = d.get_feature_names()
X_mal_train = d.get_X_mal_train
X_mal_test = d.get_X_mal_test()
X_good_train = d.get_X_good_train()
X_good_test = d.get_X_good_test()

from classifier import fit_clf

fit_clf(X, Y, C=1.0, weight=None, linearsvc=True, fname=None)

def convert_sparse_matrix_to_sparse_tensor(X):
    coo = X.tocoo()
    indices = np.mat([coo.row, coo.col]).transpose()
    return tf.SparseTensor(indices, coo.data, coo.shape)

X_tf = convert_sparse_matrix_to_sparse_tensor(X)



import tensorflow as tf
from tensorflow.keras.layers import Dense, LeakyReLU, Dropout, BatchNormalization, Input
from tensorflow.keras.models import Model
from tensorflow.keras.optimizers import Adam

disc_input = Input((X_tf.shape[1]), sparse=True, batch_size=32)
        
d1 = Dense(256)(disc_input)
lr1 = LeakyReLU(0.2)(d1)


fc = Dense(1, activation='sigmoid')(lr1)

discriminator = Model(inputs=disc_input, outputs=d1, name='Model')
discriminator.summary()
discriminator.compile(loss='binary_crossentropy', optimizer=Adam(learning_rate=0.001))
discriminator.predict(X_tf)
