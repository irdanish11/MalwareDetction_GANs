# -*- coding: utf-8 -*-
"""
Created on Sat Sep  5 01:36:35 2020

@author: Danish
"""


from DataPrepration import prepare_SvmData, load_SvmData
from SvmClassifier import SVMClassifier, load_model
import warnings


def get_C():
    print('Enter the number of values for C, i.e')
    n_values = int(input('For how many different C values you want to train SVM: '))
    C_s = []
    for i in range(n_values):
        try:
            val = int(input('Enter the Value No. {0} of C: ').format(i))
            C_s.append(val)
        except ValueError:
            warnings.warn('Invalid literal for int() with base 10: '', Enter a valid integer or float value!!!')
            val = int(input('Enter the Value No. {0} of C: ').format(i))
            C_s.append(val)
    return C_s


def prepare_trainSVM(pathX, pathY, save_path='./Data/SVM/', f_name='SVM_Data.obj', prepare=True, train=True, n_features=15000):
    if prepare:
        #preparing data 
        _ = prepare_SvmData(pathX, pathY, save_path, f_name, feature_selection=True, 
                            n_features=n_features, test_size=0.25)
    if train:
        #loading data
        X_train, Y_train, X_test, Y_test = load_SvmData(save_path, f_name)
        #training model
        ckpt_path = save_path+'checkpoints'
        
                
        for C in C_s:
            svm = SVMClassifier(C=C, path=ckpt_path, name='SVM_Model_C_{0}.h5'.format(C), svc_linear=True, weight=None)
            _ = svm.fit_svm_classifier(X_train, Y_train)



def prepare_evaluateSVM(save_path='./Data/SVM/', f_name='SVM_Data.obj'):
    labels= {0:'Benignware', 1:'Malware'}
    ckpt_path = save_path+'checkpoints/SVM_Model.h5'
    svm = load_model(ckpt_path)
    #loading data
    X_train, Y_train, X_test, Y_test = load_SvmData(save_path, f_name)
    path = save_path+'SVM_ConfusionMatrix.png'
    title = 'SVM - Confusion Matrix'
    acc = svm.visualize_evaluation(X_test, Y_test, labels, title, path=path, normalize='true')
    return acc


if __name__=='__main__':
    pathX = './Data/drebin-features/drebin-parrot-v2-down-features-X.json'
    pathY = './Data/drebin-features/drebin-parrot-v2-down-features-Y.json'
    
    save_path='./Data/SVM/'
    f_name='SVM_Data.obj'
    #Train SVM
    prepare_trainSVM(pathX, pathY, save_path, f_name)
    ch = input('Do You want to evaluate the SVM Model (y/N): ').lower()
    if ch=='y':
        #Evaluate SVM
        acc = prepare_evaluateSVM(save_path, f_name)



