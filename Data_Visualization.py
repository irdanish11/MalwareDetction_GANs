# -*- coding: utf-8 -*-
"""
Created on Wed Sep  2 17:43:44 2020

@author: Danish
"""


import json
from tqdm import tqdm
import numpy as np
from DataPrepration import remove_signatures
import matplotlib.pyplot as plt



def ReadJSON(path):
    with open(path, 'r') as f:
        obj = json.load(f)
    return obj


def high_level_features(X):    
    f_len = []
    unique = []    
    for i in tqdm(X):
        f_len.append(len(i))
        for f in list(i.keys()):
            if f.split(':')[0] not in unique:
                unique.append(f.split(':')[0])
    return unique, f_len

def non_common(dic1, dic2, common=False):
    dic3 = {}
    if not common:
        for f in dic1:
            if f not in dic2: 
                dic3[f] = dic1[f]
    elif common:
        for f in dic1:
            if f in dic2: 
                dic3[f] = dic1[f]
    return dic3

def get_features_info(X, Y):
    info = {}
    features_count = {}
    malware_feature_count = {}
    goodware_feature_count = {}
    catogeories_count = {}
    for val in unique:
        #[Goodware, Malware]
        catogeories_count[val] = [0, 0]
        
    for idx, dic in tqdm(enumerate(X)):
        label = Y[idx]
        for f in dic:
            #finding category
            category = f.split(':')[0]
            #categories count
            catogeories_count[category][label] += 1
            #Counting features
            if f not in features_count:
                features_count[f] = 1
            else:
                features_count[f] += 1
            #Goodware Count
            if label==0:
                if f not in goodware_feature_count:
                    goodware_feature_count[f] = 1
                else:
                    goodware_feature_count[f] += 1 
            #Malware Count
            if label==1:
                if f not in malware_feature_count:
                    malware_feature_count[f] = 1
                else:
                    malware_feature_count[f] += 1
    goodware_feature_only = non_common(goodware_feature_count, malware_feature_count)  
    malware_feature_only = non_common(malware_feature_count, goodware_feature_count)       
    common_features = non_common(goodware_feature_count, malware_feature_count, common=True)    
    
    info['features_count'] = features_count
    info['malware_feature_count'] = malware_feature_count
    info['goodware_feature_count'] = goodware_feature_count
    info['catogeories_count'] = catogeories_count
    info['goodware_feature_only'] = goodware_feature_only
    info['malware_feature_only'] = malware_feature_only
    info['common_features'] = common_features
    return info

pathX = 'drebin-features/drebin-parrot-v2-down-features-X.json'
pathY = 'drebin-features/drebin-parrot-v2-down-features-Y.json'
#Read Data
X = ReadJSON(pathX)
Y = ReadJSON(pathY)

X, Y = remove_signatures(X, Y)
unique, f_len =  high_level_features(X)
info = get_features_info(X, Y)

features_count = info['features_count']
count = list(features_count.values())
ones = []
tens = []
hundreds = []
thousands= []
max_=[]
for val in count:
    if val==1:
        ones.append(val)
    elif val>=2 and val<=100:
        tens.append(val)
    elif val>100 and val<=1000:
        hundreds.append(val)
    elif val>1000 and val<=10000:
        thousands.append(val)
    else:
        max_.append(val)

plt.hist(tens)
